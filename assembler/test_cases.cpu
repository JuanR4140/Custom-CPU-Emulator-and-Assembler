_main:

  mov ax, 0x5         ; 0x00 0x00 0x05 0x00
  mov bx, ax          ; 0x01 0x01 0x00 0x00
  mov ax, [bx]        ; 0x02 0x00 0x01 0x00
  mov [cx], ax        ; 0x03 0x02 0x00 0x00
  mov ax, [bx + 5]    ; 0x04 0x00 0x01 0x05
  mov ax, [bx + cx]   ; 0x05 0x00 0x01 0x02
  mov [ax + 5], cx    ; 0x06 0x00 0x05 0x02 - This violates the 4 byte format (ins, reg, loval, hival). Sorry :<
  mov [ax + bx], cx   ; 0x07 0x00 0x01 0x02 - This violates the 4 byte format (ins, reg, loval, hival). Sorry :<
  mov ax, [0x400]     ; 0x08 0x00 0x00 0x04
  mov [0x400], bx     ; 0x09 0x00 0x40 0x01 - This violates the 4 byte format (ins, reg, loval, hival). Sorry :<


  cmp ax, 0           ; 0x20 0x0 0x0 0x0
  cmp ax, bx          ; 0x21 0x0 0x1 0x0

test:
  jmp _main           ; 0x30 0x0 0x00 0xE0
  je _main            ; 0x31 0x0 0x00 0xE0
  jne _main           ; 0x32 0x0 0x00 0xE0
  jl test             ; 0x33 0x0 0x30 0xE0
  jg test             ; 0x34 0x0 0x30 0xE0
  call test           ; 0x35 0x0 0x30 0xE0
  ret                 ; 0x36 0x0 0x00 0x00
  ret 2               ; 0x36 0x0 0x02 0x00


  add ax, 0xBEEF      ; 0x40 0x0 0xEF 0xBE
  add bx, ax          ; 0x41 0x1 0x0 0x0


  sub ax, 0xBEEF      ; 0x50 0x0 0xEF 0xBE
  sub bx, ax          ; 0x51 0x1 0x0 0x0

  mul cx              ; 0x60 0x2 0x0 0x0


  div bx              ; 0x70 0x1 0x0 0x0


  push 0x5            ; 0x80 0x0 0x5 0x0
  push bx             ; 0x81 0x1 0x0 0x0


  pop cx              ; 0x90 0x2 0x0 0x0


  and ax, bx          ; 0xA0 0x0 0x1 0x0
  not bx              ; 0xA1 0x1 0x0 0x0
  or cx, dx           ; 0xA2 0x2 0x3 0x0
  xor dx, dx          ; 0xA3 0x3 0x3 0x0


  shr ax, 0x5         ; 0xB0 0x0 0x5 0x0
  shr ax, bx          ; 0xB1 0x0 0x1 0x0
  shl ax, 0x5         ; 0xB2 0x0 0x5 0x0
  shl ax, cx          ; 0xB3 0x0 0x2 0x0


  hlt                 ; 0xFE 0x0 0x0 0x0
  nop                 ; 0xFF 0x0 0x0 0x0